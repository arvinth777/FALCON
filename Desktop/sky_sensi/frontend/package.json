{
  "name": "falcon-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "description": "Aviation weather briefing frontend for FALCON",
  "scripts": {
    "predev": "npm run validate-env",
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "test": "vitest",
    "test:unit": "vitest --run",
    "test:coverage": "vitest --coverage --run",
    "test:watch": "vitest --watch",
    "test:openweathermap": "vitest --run test/components/WeatherMap.test.jsx",
    "health": "curl -f http://localhost:3000 || echo 'Frontend not running'",
    "validate-env": "node -e \"require('dotenv').config(); const required = ['VITE_API_BASE_URL', 'VITE_ENV']; const missing = required.filter(key => !process.env[key]); if (missing.length) { console.error('Missing required environment variables:', missing.join(', ')); process.exit(1); } console.log('Frontend environment variables validated successfully');\"",
    "postinstall": "node -e \"(async()=>{try{await import('vite');await import('react');console.log('Critical frontend dependencies loaded successfully');}catch(e){console.warn('Warning: Critical frontend dependencies could not be loaded:',e.message)}})();\"",
    "clean": "rimraf node_modules package-lock.json",
    "health:check": "node -e \"const ServiceHealthCheckers = require('../service-health-checkers.js'); const checkers = new ServiceHealthCheckers(); checkers.checkAllServices().then(results => console.log('Frontend services:', JSON.stringify(results, null, 2)));\"",
    "health:frontend": "node -e \"const ServiceHealthCheckers = require('../service-health-checkers.js'); const checkers = new ServiceHealthCheckers(); checkers.checkFrontendHealth().then(result => console.log('Frontend service:', JSON.stringify(result, null, 2)));\"",
    "health:owm": "node -e \"const ServiceHealthCheckers = require('../service-health-checkers.js'); const checkers = new ServiceHealthCheckers(); checkers.checkOpenWeatherMapHealth().then(result => console.log('OpenWeatherMap service:', JSON.stringify(result, null, 2)));\"",
    "health:openmeteo": "node -e \"const ServiceHealthCheckers = require('../service-health-checkers.js'); const checkers = new ServiceHealthCheckers(); checkers.checkOpenMeteoHealth().then(result => console.log('Open-Meteo service:', JSON.stringify(result, null, 2)));\"",
    "environment:check": "node -e \"const EnvironmentValidator = require('../environment-validator.js'); const validator = new EnvironmentValidator(); validator.validateEnvironmentVariables('frontend').then(result => console.log('Frontend environment:', JSON.stringify(result, null, 2)));\"",
    "performance:check": "node -e \"const PerformanceMonitor = require('../performance-monitor.js'); const monitor = new PerformanceMonitor(); monitor.collectMetrics().then(metrics => console.log('Frontend performance:', JSON.stringify(metrics.network, null, 2)));\""
  },
  "dependencies": {
    "axios": "^1.6.0",
    "leaflet": "^1.9.4",
    "leaflet-defaulticon-compatibility": "^0.1.2",
    "lucide-react": "^0.292.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-leaflet": "^4.2.1",
    "react-loading-skeleton": "^3.3.1",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.5.1",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@vitejs/plugin-react": "^4.1.1",
    "autoprefixer": "^10.4.16",
    "dotenv": "^16.3.1",
    "eslint": "^8.53.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "jsdom": "^22.1.0",
    "postcss": "^8.4.31",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.5",
    "tailwindcss": "^3.3.5",
    "vite": "^7.1.7",
    "vitest": "^3.2.4"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
